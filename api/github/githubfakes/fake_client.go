// Code generated by counterfeiter. DO NOT EDIT.
package githubfakes

import (
	"context"
	"sync"

	"github.com/heat1q/boardsite/api/github"
)

type FakeClient struct {
	GetUserEmailsStub        func(context.Context, string) ([]github.UserEmail, error)
	getUserEmailsMutex       sync.RWMutex
	getUserEmailsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getUserEmailsReturns struct {
		result1 []github.UserEmail
		result2 error
	}
	getUserEmailsReturnsOnCall map[int]struct {
		result1 []github.UserEmail
		result2 error
	}
	PostTokenStub        func(context.Context, string) (*github.TokenResponse, error)
	postTokenMutex       sync.RWMutex
	postTokenArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	postTokenReturns struct {
		result1 *github.TokenResponse
		result2 error
	}
	postTokenReturnsOnCall map[int]struct {
		result1 *github.TokenResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetUserEmails(arg1 context.Context, arg2 string) ([]github.UserEmail, error) {
	fake.getUserEmailsMutex.Lock()
	ret, specificReturn := fake.getUserEmailsReturnsOnCall[len(fake.getUserEmailsArgsForCall)]
	fake.getUserEmailsArgsForCall = append(fake.getUserEmailsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetUserEmailsStub
	fakeReturns := fake.getUserEmailsReturns
	fake.recordInvocation("GetUserEmails", []interface{}{arg1, arg2})
	fake.getUserEmailsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetUserEmailsCallCount() int {
	fake.getUserEmailsMutex.RLock()
	defer fake.getUserEmailsMutex.RUnlock()
	return len(fake.getUserEmailsArgsForCall)
}

func (fake *FakeClient) GetUserEmailsCalls(stub func(context.Context, string) ([]github.UserEmail, error)) {
	fake.getUserEmailsMutex.Lock()
	defer fake.getUserEmailsMutex.Unlock()
	fake.GetUserEmailsStub = stub
}

func (fake *FakeClient) GetUserEmailsArgsForCall(i int) (context.Context, string) {
	fake.getUserEmailsMutex.RLock()
	defer fake.getUserEmailsMutex.RUnlock()
	argsForCall := fake.getUserEmailsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) GetUserEmailsReturns(result1 []github.UserEmail, result2 error) {
	fake.getUserEmailsMutex.Lock()
	defer fake.getUserEmailsMutex.Unlock()
	fake.GetUserEmailsStub = nil
	fake.getUserEmailsReturns = struct {
		result1 []github.UserEmail
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetUserEmailsReturnsOnCall(i int, result1 []github.UserEmail, result2 error) {
	fake.getUserEmailsMutex.Lock()
	defer fake.getUserEmailsMutex.Unlock()
	fake.GetUserEmailsStub = nil
	if fake.getUserEmailsReturnsOnCall == nil {
		fake.getUserEmailsReturnsOnCall = make(map[int]struct {
			result1 []github.UserEmail
			result2 error
		})
	}
	fake.getUserEmailsReturnsOnCall[i] = struct {
		result1 []github.UserEmail
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) PostToken(arg1 context.Context, arg2 string) (*github.TokenResponse, error) {
	fake.postTokenMutex.Lock()
	ret, specificReturn := fake.postTokenReturnsOnCall[len(fake.postTokenArgsForCall)]
	fake.postTokenArgsForCall = append(fake.postTokenArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.PostTokenStub
	fakeReturns := fake.postTokenReturns
	fake.recordInvocation("PostToken", []interface{}{arg1, arg2})
	fake.postTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) PostTokenCallCount() int {
	fake.postTokenMutex.RLock()
	defer fake.postTokenMutex.RUnlock()
	return len(fake.postTokenArgsForCall)
}

func (fake *FakeClient) PostTokenCalls(stub func(context.Context, string) (*github.TokenResponse, error)) {
	fake.postTokenMutex.Lock()
	defer fake.postTokenMutex.Unlock()
	fake.PostTokenStub = stub
}

func (fake *FakeClient) PostTokenArgsForCall(i int) (context.Context, string) {
	fake.postTokenMutex.RLock()
	defer fake.postTokenMutex.RUnlock()
	argsForCall := fake.postTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) PostTokenReturns(result1 *github.TokenResponse, result2 error) {
	fake.postTokenMutex.Lock()
	defer fake.postTokenMutex.Unlock()
	fake.PostTokenStub = nil
	fake.postTokenReturns = struct {
		result1 *github.TokenResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) PostTokenReturnsOnCall(i int, result1 *github.TokenResponse, result2 error) {
	fake.postTokenMutex.Lock()
	defer fake.postTokenMutex.Unlock()
	fake.PostTokenStub = nil
	if fake.postTokenReturnsOnCall == nil {
		fake.postTokenReturnsOnCall = make(map[int]struct {
			result1 *github.TokenResponse
			result2 error
		})
	}
	fake.postTokenReturnsOnCall[i] = struct {
		result1 *github.TokenResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getUserEmailsMutex.RLock()
	defer fake.getUserEmailsMutex.RUnlock()
	fake.postTokenMutex.RLock()
	defer fake.postTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ github.Client = new(FakeClient)
