// Code generated by counterfeiter. DO NOT EDIT.
package githubfakes

import (
	"sync"

	"github.com/boardsite-io/server/api/github"
	echo "github.com/labstack/echo/v4"
)

type FakeHandler struct {
	GetAuthorizeStub        func(echo.Context) error
	getAuthorizeMutex       sync.RWMutex
	getAuthorizeArgsForCall []struct {
		arg1 echo.Context
	}
	getAuthorizeReturns struct {
		result1 error
	}
	getAuthorizeReturnsOnCall map[int]struct {
		result1 error
	}
	GetCallbackStub        func(echo.Context) error
	getCallbackMutex       sync.RWMutex
	getCallbackArgsForCall []struct {
		arg1 echo.Context
	}
	getCallbackReturns struct {
		result1 error
	}
	getCallbackReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandler) GetAuthorize(arg1 echo.Context) error {
	fake.getAuthorizeMutex.Lock()
	ret, specificReturn := fake.getAuthorizeReturnsOnCall[len(fake.getAuthorizeArgsForCall)]
	fake.getAuthorizeArgsForCall = append(fake.getAuthorizeArgsForCall, struct {
		arg1 echo.Context
	}{arg1})
	stub := fake.GetAuthorizeStub
	fakeReturns := fake.getAuthorizeReturns
	fake.recordInvocation("GetAuthorize", []interface{}{arg1})
	fake.getAuthorizeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHandler) GetAuthorizeCallCount() int {
	fake.getAuthorizeMutex.RLock()
	defer fake.getAuthorizeMutex.RUnlock()
	return len(fake.getAuthorizeArgsForCall)
}

func (fake *FakeHandler) GetAuthorizeCalls(stub func(echo.Context) error) {
	fake.getAuthorizeMutex.Lock()
	defer fake.getAuthorizeMutex.Unlock()
	fake.GetAuthorizeStub = stub
}

func (fake *FakeHandler) GetAuthorizeArgsForCall(i int) echo.Context {
	fake.getAuthorizeMutex.RLock()
	defer fake.getAuthorizeMutex.RUnlock()
	argsForCall := fake.getAuthorizeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandler) GetAuthorizeReturns(result1 error) {
	fake.getAuthorizeMutex.Lock()
	defer fake.getAuthorizeMutex.Unlock()
	fake.GetAuthorizeStub = nil
	fake.getAuthorizeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHandler) GetAuthorizeReturnsOnCall(i int, result1 error) {
	fake.getAuthorizeMutex.Lock()
	defer fake.getAuthorizeMutex.Unlock()
	fake.GetAuthorizeStub = nil
	if fake.getAuthorizeReturnsOnCall == nil {
		fake.getAuthorizeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getAuthorizeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHandler) GetCallback(arg1 echo.Context) error {
	fake.getCallbackMutex.Lock()
	ret, specificReturn := fake.getCallbackReturnsOnCall[len(fake.getCallbackArgsForCall)]
	fake.getCallbackArgsForCall = append(fake.getCallbackArgsForCall, struct {
		arg1 echo.Context
	}{arg1})
	stub := fake.GetCallbackStub
	fakeReturns := fake.getCallbackReturns
	fake.recordInvocation("GetCallback", []interface{}{arg1})
	fake.getCallbackMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHandler) GetCallbackCallCount() int {
	fake.getCallbackMutex.RLock()
	defer fake.getCallbackMutex.RUnlock()
	return len(fake.getCallbackArgsForCall)
}

func (fake *FakeHandler) GetCallbackCalls(stub func(echo.Context) error) {
	fake.getCallbackMutex.Lock()
	defer fake.getCallbackMutex.Unlock()
	fake.GetCallbackStub = stub
}

func (fake *FakeHandler) GetCallbackArgsForCall(i int) echo.Context {
	fake.getCallbackMutex.RLock()
	defer fake.getCallbackMutex.RUnlock()
	argsForCall := fake.getCallbackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHandler) GetCallbackReturns(result1 error) {
	fake.getCallbackMutex.Lock()
	defer fake.getCallbackMutex.Unlock()
	fake.GetCallbackStub = nil
	fake.getCallbackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeHandler) GetCallbackReturnsOnCall(i int, result1 error) {
	fake.getCallbackMutex.Lock()
	defer fake.getCallbackMutex.Unlock()
	fake.GetCallbackStub = nil
	if fake.getCallbackReturnsOnCall == nil {
		fake.getCallbackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getCallbackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAuthorizeMutex.RLock()
	defer fake.getAuthorizeMutex.RUnlock()
	fake.getCallbackMutex.RLock()
	defer fake.getCallbackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ github.Handler = new(FakeHandler)
